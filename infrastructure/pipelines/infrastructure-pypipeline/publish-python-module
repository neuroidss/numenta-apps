#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

"""
publish-python-module script

Checks out a git repository, then creates a wheel file for a python module
in the repository and uploads it to a pypi server
"""

import argparse
import os

from infrastructure.utilities import git
from infrastructure.utilities.cli import runWithOutput
from infrastructure.utilities.diagnostics import (initPipelineLogger,
                                                  LOG_LEVELS)
from infrastructure.utilities.jenkins import getWorkspace
from infrastructure.utilities.path import changeToWorkingDir



def _parseCLIArgs():
  """
  Parse the command line arguments

  :returns: Parsed command line arguments
  :rtype: argparse.Namespace
  """
  # Set up our defaults from the environment
  repoDirectory = "numenta-apps"
  remote = os.environ.get("FORK", "git@github.com:Numenta/numenta-apps.git")
  commitish = os.environ.get("COMMITISH", "master")
  pypiServer = os.environ.get("PYPI_SERVER", "numenta-pypi")

  parser = argparse.ArgumentParser(description=("Build and upload "
                                                "python modules to "
                                                "numenta's pypi server"))
  parser.add_argument("--repo-directory",
                      dest="repoDirectory",
                      type=str,
                      default=repoDirectory,
                      help="path to git repo directory in workspace directory")

  parser.add_argument("--commitish",
                      dest="commitish",
                      type=str,
                      default=commitish,
                      help="What commitish to build from. Default to tip "
                           "of master")

  parser.add_argument("--force-upload",
                      dest="forceUpload",
                      action="store_true",
                      help="Upload the wheel even if not being run by Jenkins")

  parser.add_argument("--remote",
                      dest="remote",
                      type=str,
                      default=remote,
                      help="What remote to build from. Default to %s" % remote)

  parser.add_argument("--log-level",
                      dest="logLevel",
                      type=str,
                      default="info",
                      choices=LOG_LEVELS,
                      help="Set the logging level. Default to INFO")

  parser.add_argument("--module-directory",
                      dest="moduleDirectory",
                      type=str,
                      help="What subdirectory of the repo to publish")

  parser.add_argument("--pypi-server",
                      dest="pypiServer",
                      type=str,
                      default=pypiServer,
                      help="What pypi server to upload to. Default "
                           "to %s " % pypiServer)

  parser.add_argument("--workspace",
                      dest="workspace",
                      type=str,
                      help="Path to workspace directory. Default = $WORKSPACE")

  return parser.parse_args()


def setupWorkspace(workspace, repoDirectory, remote, commitish, logger):
  """
  Creates/updates the git repo in workspace.

  :param str workspace: path to workspace directory
  :param str repoDirectory: directory name of the git repository
  :param str remote: Which remote to check out
  :param str commitish: What commit/branch to check out
  :param logger: An initialized logger

  :raises AssertionError: If our parameters have invalid values
  """
  assert isinstance(workspace, basestring), (
    "workspace is %r instead of string" % workspace)
  assert os.path.isdir(workspace), ("workspace %s is not a directory" %
                                    workspace)
  assert isinstance(repoDirectory, basestring), (
    "repoDirectory is %r instead of string" % repoDirectory)
  assert isinstance(remote, basestring), ("remote is %r instead of string" %
                                          remote)
  assert isinstance(commitish, basestring), (
    "commitish is %r instead of string" % commitish)
  assert logger, "You must supply an initialized logger object"

  fullRepoPath = os.path.join(workspace, repoDirectory)
  if os.path.exists(fullRepoPath):
    logger.info("Updating git repository in %s", repoDirectory)
    with changeToWorkingDir(fullRepoPath):
      logger.info("Cleaning git repository...")
      git.clean(path=fullRepoPath, arguments="-fd", logger=logger)
  else:
    logger.info("Cloning new git repository from %s...", remote)
    with changeToWorkingDir(workspace):
      git.clone(logger=logger,
                gitURL=remote,
                directory=repoDirectory)


  with changeToWorkingDir(fullRepoPath):
    logger.info("Pulling from %s", remote)
    git.pull(logger=logger, arguments=[remote])

    logger.info("Checking out %s in %s", commitish, repoDirectory)
    git.checkout(logger=logger, pathspec=commitish)


def buildAndUploadModule(logger, moduleDirectory,
                         pypiServer, forceUpload=False):
  """
  Builds and uploads the a python module to our pypi server

  :param logger: An initialized logger
  :param str moduleDirectory: path to directory containing setup.py
  :param str pypiServer: which pypi server to upload to.
  :param bool dryrun: Whether to upload to our pypi server

  :raises AssertionError: If our parameters have invalid values
  """
  assert logger, "You must supply an initialized logger object"
  assert isinstance(moduleDirectory, basestring), (
    "moduleDirectory is %r instead of string" % moduleDirectory)
  assert isinstance(pypiServer, basestring), (
    "pypiServer is %r instead of string" % pypiServer)
  assert isinstance(forceUpload, bool), (
    "forceUpload is %r instead of bool" % forceUpload)

  setupPath = os.path.join(moduleDirectory, "setup.py")
  assert os.path.isfile(setupPath), "Could not find setup.py at %s" % setupPath

  buildArgs = ["python", "setup.py",
               "sdist", "bdist_wheel", "bdist", "bdist_egg"]

  # Only upload if building on jenkins unless --force-upload in CLI arguments
  if forceUpload or "JENKINS_HOME" in os.environ:
    buildArgs.extend(["upload", "-r", pypiServer])
  else:
    logger.info("Not being run by jenkins, skipping pypi upload")

  with changeToWorkingDir(moduleDirectory):
    logger.info("Building in %s", moduleDirectory)
    runWithOutput(command=buildArgs, logger=logger)


def main(config):
  """
  Main function for the pipeline. Executes all sub-tasks.

  :param args: Parsed command line arguments
  :raises ValueError:
  """
  logger = initPipelineLogger("infrastructure-pypipeline",
                              logLevel=config.logLevel)
  if config.workspace is None:
    config.workspace = getWorkspace(logger=logger)
  fullRepoPath = os.path.join(config.workspace, config.repoDirectory)
  moduleDirectory = os.path.join(fullRepoPath, config.moduleDirectory)

  setupWorkspace(logger=logger,
                 workspace=config.workspace,
                 repoDirectory=config.repoDirectory,
                 remote=config.remote,
                 commitish=config.commitish)

  buildAndUploadModule(logger=logger,
                       moduleDirectory=moduleDirectory,
                       pypiServer=config.pypiServer,
                       forceUpload=config.forceUpload)


if __name__ == "__main__":
  main(_parseCLIArgs())
