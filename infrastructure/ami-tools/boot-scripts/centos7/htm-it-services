#!/usr/bin/env bash
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
# /etc/rc.d/init.d/htm-it-services
#
# htm-it-services uses supervisord to start up htm-it services.
#
# chkconfig: - 99 10
# description: Starts HTM-IT Services
# processname: supervisord

# This init script starts HTM-IT services

set -o pipefail

if [ "$(/usr/bin/id -u)" -ne 0 ]; then
  echo "You are not root"
  exit 1
fi

# Source init functions
. /etc/rc.d/init.d/functions
source /etc/htm.it/supervisord.vars

prog="supervisord"
supervisor_helper="${NUMENTA}/supervisord-helper"
FIRSTBOOT_RECEIPT=/etc/htm.it/firstboot.run
ROOTBOOT_HELPER=/usr/local/sbin/firstboot-root.sh
export ROOTBOOT_RECEIPT=/etc/htm.it/firstboot.run
UPDATE_IS_RUNNING=/tmp/gs-perform-htm-it-update.lock

run-rootboot-helper() {
  # Run the firstboot things we need to do as root here, before we drop
  # privileges to centos

  if [ -x "${ROOTBOOT_HELPER}" ]; then
    "${ROOTBOOT_HELPER}" 2>&1 | tee >(logger -t rootboot-helper)
    if [ $? != "0" ]; then
      /etc/init.d/htm-it-preload htm-it-error
      exit 1
    fi
  fi
}

kill_preload() {
  /etc/init.d/htm-it-preload stop
}

syslog-rabbit-status() {
  # Ensure we only have one rabbitmq dump at a time so the log entries
  # don't get jumbled up
  lockrun --lockfile=/var/lock/rabbit-status.lock -- \
    rabbitmqctl status 2>&1 | \
    logger -t htm-it-rabbit
}

start()
{
  # There is an issue with rabbitmq, erlang, systemd notify, and systemd that
  # means it's difficult to get rabbitmq to run as an independent service.
  # Therefore, we start and stop rabbitmq inside the htm-it-services scripts to
  # ensure it is running when needed.
  /usr/sbin/rabbitmq-server -detached
  run-rootboot-helper
  syslog-rabbit-status
  echo -n "Starting ${prog}: "
  logger -t htm-it-services "start()"
  cd "${HTM_IT_HOME}"
  su centos -c "${supervisor_helper} start"
  echo
  kill_preload
  /etc/init.d/htm-it-preload restart-htm-it
}

stop()
{
  syslog-rabbit-status
  echo -n "Shutting down ${prog}: "
  logger -t htm-it-services "stop()"
  cd "${HTM_IT_HOME}"
  su centos -c "${supervisor_helper} stop"
  /etc/init.d/htm-it-preload htm-it-stopped
  echo
  # There is an issue with rabbitmq, erlang, systemd notify, and systemd that
  # means it's difficult to get rabbitmq to run as an independent service.
  # Therefore, we start and stop rabbitmq inside the htm-it-services scripts to
  # ensure it is running when needed.
  /usr/sbin/rabbitmqctl stop
}

status()
{
  syslog-rabbit-status
  echo -n "Status of ${prog}: "
  logger -t htm-it-services "status()"
  cd "${HTM_IT_HOME}"
  su centos -c "${supervisor_helper} status"
  echo
}

restart()
{
  syslog-rabbit-status
  run-rootboot-helper
  echo -n "Restarting ${prog}: "
  logger -t htm-it-services "restart()"
  cd "${HTM_IT_HOME}"
  su centos -c "${supervisor_helper} restart"
  /etc/init.d/htm-it-preload restart-htm-it
  echo
}

tickle()
{
  if [ -d "${UPDATE_IS_RUNNING}" ]; then
    logger -t htm-it-services "tickle() - Skipping, updater running"
    exit 0
  fi
  syslog-rabbit-status
  if [ -f "${FIRSTBOOT_RECEIPT}" ]; then
    echo -n "Tickling $prog: "
    logger -t htm-it-services "tickle()"
    cd "${HTM_IT_HOME}"
    su centos -c "${supervisor_helper} tickle"
  else
    echo "skipping tickle; firtboot hasn't run."
  fi
}

case "${1}" in

  start)
    start
    lockrun --lockfile=/var/lock/shuffle_htm_it_logs -- /usr/local/sbin/shuffle_htm_it_logs 2>&1 | logger -t gs-shuffle-htm-itlogs
  ;;

  stop)
    stop
    lockrun --lockfile=/var/lock/shuffle_htm_it_logs -- /usr/local/sbin/shuffle_htm_it_logs 2>&1 | logger -t gs-shuffle-htm-itlogs
  ;;

  status)
    status
  ;;

  restart)
    restart
  ;;

  tickle)
    tickle
  ;;

  *)
    echo "Usage: $0 {start|stop|restart|status|tickle}"
  ;;

esac
